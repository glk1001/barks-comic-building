import os
import time

import cv2 as cv
import numpy as np
from numba import jit

DEBUG = True
DEBUG_OUTPUT_DIR = "/tmp"

IN_PAINT_RADIUS = 3
IN_PAINT_CUTOUT_FILL_COLOR = (128, 128, 128)
MEDIAN_BLUR_APERTURE_SIZE = 7
ADAPTIVE_THRESHOLD_BLOCK_SIZE = 21
ADAPTIVE_THRESHOLD_CONST_SUBTRACT = 10


def median_filter3(original_image, mask, kernel_size: int):
    filtered_image = np.zeros_like(original_image)
    w = kernel_size // 2

    wrapped_image = cv.copyMakeBorder(original_image, w, w, w, w, cv.BORDER_CONSTANT, None,
                                  value=(255, 255, 255))
    wrapped_mask = cv.copyMakeBorder(mask, w, w, w, w, cv.BORDER_CONSTANT, None,
                                  value=(255, 255, 255))

    median_filter_core(wrapped_image, wrapped_mask, kernel_size, filtered_image)

#    median_filter_core.parallel_diagnostics(level=4)

    return filtered_image


@jit(nopython=True, parallel=False)
def median_filter_core(wrapped_image, wrapped_mask, kernel_size: int, filtered_image):
    image_h, image_w = filtered_image.shape[0], filtered_image.shape[1]
    w = kernel_size // 2

    for i in range(w, image_h - w):  ## traverse image row
        for j in range(w, image_w - w):  ## traverse image col
            num_nbrs, nbrs0, nbrs1, nbrs2 = get_neighbours(wrapped_image, wrapped_mask, kernel_size, w, i, j)
            filtered_image[i-w, j-w] = get_median(num_nbrs, nbrs0, nbrs1, nbrs2)


@jit(nopython=True, parallel=False)
def get_neighbours(wrapped_image, wrapped_mask, kernel_size: int, w: int, i: int, j: int):
    nbrs0 = np.empty((kernel_size * kernel_size, 1), dtype=wrapped_image.dtype)
    nbrs1 = np.empty((kernel_size * kernel_size, 1), dtype=wrapped_image.dtype)
    nbrs2 = np.empty((kernel_size * kernel_size, 1), dtype=wrapped_image.dtype)

    num_nbrs = 0
    for x in range(i - w, i + w + 1):
        for y in range(j - w, j + w + 1):
            if wrapped_mask[x, y] > 0:
                continue
            pixel = wrapped_image[x, y]
            nbrs0[num_nbrs] = pixel[0]
            nbrs1[num_nbrs] = pixel[1]
            nbrs2[num_nbrs] = pixel[2]
            num_nbrs += 1

    return num_nbrs, nbrs0[:num_nbrs], nbrs1[:num_nbrs], nbrs2[:num_nbrs]


@jit(nopython=True, parallel=False)
def get_median(num_nbrs, nbrs0, nbrs1, nbrs2):
    if num_nbrs == 0:
        return (0, 0, 0)

    filt0 = np.median(nbrs0)
    filt1 = np.median(nbrs1)
    filt2 = np.median(nbrs2)
    return filt0, filt1, filt2


def get_larger_mask(mask):
    kernel = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
    return cv.dilate(mask, kernel, iterations=1)


def get_cutout_image(image, mask):
    cutout_image = np.full_like(image, IN_PAINT_CUTOUT_FILL_COLOR)
    cutout_image[mask == 0] = image[mask == 0]
    return cutout_image


def remove_alias_artifacts(image):
    gray_image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    black_ink_mask = cv.adaptiveThreshold(
        gray_image,
        255,
        cv.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv.THRESH_BINARY_INV,
        ADAPTIVE_THRESHOLD_BLOCK_SIZE,
        ADAPTIVE_THRESHOLD_CONST_SUBTRACT,
    )
    if DEBUG:
        cv.imwrite(os.path.join(DEBUG_OUTPUT_DIR, "black-ink-mask.jpg"), black_ink_mask)

    enlarged_black_ink_mask = get_larger_mask(black_ink_mask)
    if DEBUG:
        cv.imwrite(
            os.path.join(DEBUG_OUTPUT_DIR, "enlarged-black-ink-mask.jpg"),
            enlarged_black_ink_mask,
        )

    black_ink_cutout_image = get_cutout_image(image, enlarged_black_ink_mask)
    if DEBUG:
        cv.imwrite(
            os.path.join(DEBUG_OUTPUT_DIR, "black-ink-cutout-image.jpg"),
            black_ink_cutout_image,
        )
    #black_ink_cutout_image = cv.imread(os.path.join(DEBUG_OUTPUT_DIR, "black-ink-cutout-image.jpg"))

    # in_painted_image = cv.inpaint(
    #     black_ink_cutout_image, enlarged_black_ink_mask, IN_PAINT_RADIUS, cv.INPAINT_NS
    # )
    # if DEBUG:
    #     cv.imwrite(
    #         os.path.join(DEBUG_OUTPUT_DIR, "in-painted-image.jpg"), in_painted_image
    #     )

    #blurred_image = cv.medianBlur(in_painted_image, MEDIAN_BLUR_APERTURE_SIZE)
    blurred_image = median_filter3(image, enlarged_black_ink_mask, MEDIAN_BLUR_APERTURE_SIZE)
    if DEBUG:
        cv.imwrite(os.path.join(DEBUG_OUTPUT_DIR, "blurred-image.jpg"), blurred_image)

    out_image = image.copy()
    out_image[black_ink_mask == 0] = blurred_image[black_ink_mask == 0]
    out_image[enlarged_black_ink_mask != 0] = image[enlarged_black_ink_mask != 0]

    return out_image


start_time = time.time()

image_file = (
    "/home/greg/Books/Carl Barks/The Comics/"
    "Comics and Stories/055 The Terrible Turkey/images/05.jpg"
)
#image_file = "restore-tests/test-image.jpg"
# image_file = "restore-tests/simple-test-image.jpg"

input_image = cv.imread(image_file)
height, width, num_channels = input_image.shape
print(f"width: {width}, height: {height}, channels: {num_channels}")

improved_image = remove_alias_artifacts(input_image)

cv.imwrite("/tmp/improved-image.jpg", improved_image)

end_time = time.time()
elapsed_time = round(end_time - start_time)
print(f"Execution time: {elapsed_time} seconds")
